// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocknotifier

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTelegramClient is an autogenerated mock type for the TelegramClient type
type MockTelegramClient struct {
	mock.Mock
}

type MockTelegramClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTelegramClient) EXPECT() *MockTelegramClient_Expecter {
	return &MockTelegramClient_Expecter{mock: &_m.Mock}
}

// AddReceivers provides a mock function with given fields: chatIDs
func (_m *MockTelegramClient) AddReceivers(chatIDs ...int64) {
	_va := make([]interface{}, len(chatIDs))
	for _i := range chatIDs {
		_va[_i] = chatIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockTelegramClient_AddReceivers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReceivers'
type MockTelegramClient_AddReceivers_Call struct {
	*mock.Call
}

// AddReceivers is a helper method to define mock.On call
//   - chatIDs ...int64
func (_e *MockTelegramClient_Expecter) AddReceivers(chatIDs ...interface{}) *MockTelegramClient_AddReceivers_Call {
	return &MockTelegramClient_AddReceivers_Call{Call: _e.mock.On("AddReceivers",
		append([]interface{}{}, chatIDs...)...)}
}

func (_c *MockTelegramClient_AddReceivers_Call) Run(run func(chatIDs ...int64)) *MockTelegramClient_AddReceivers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockTelegramClient_AddReceivers_Call) Return() *MockTelegramClient_AddReceivers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTelegramClient_AddReceivers_Call) RunAndReturn(run func(...int64)) *MockTelegramClient_AddReceivers_Call {
	_c.Run(run)
	return _c
}

// Send provides a mock function with given fields: ctx, subject, message
func (_m *MockTelegramClient) Send(ctx context.Context, subject string, message string) error {
	ret := _m.Called(ctx, subject, message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, subject, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTelegramClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockTelegramClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - subject string
//   - message string
func (_e *MockTelegramClient_Expecter) Send(ctx interface{}, subject interface{}, message interface{}) *MockTelegramClient_Send_Call {
	return &MockTelegramClient_Send_Call{Call: _e.mock.On("Send", ctx, subject, message)}
}

func (_c *MockTelegramClient_Send_Call) Run(run func(ctx context.Context, subject string, message string)) *MockTelegramClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTelegramClient_Send_Call) Return(_a0 error) *MockTelegramClient_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTelegramClient_Send_Call) RunAndReturn(run func(context.Context, string, string) error) *MockTelegramClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTelegramClient creates a new instance of MockTelegramClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTelegramClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTelegramClient {
	mock := &MockTelegramClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
